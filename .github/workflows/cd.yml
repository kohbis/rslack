---
name: CD

on: pull_request
  # pull_request:
  #   branches:
  #     - main
  #   types: [closed]
  # push:
  #   tags:
  #     - 'v[0-9]+.[0-9]+.[0-9]+.*'

jobs:
  spec:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check_release.outputs.enable }}
    steps:
      # - name: checkout
      #   uses: actions/checkout@v2
      # - name: run fmt check
      #   run: cargo fmt -- --check
      # - name: run tests
      #   run: cargo test --verbose
      - name: Check release
        id: check_release
        run: |
          if [[ ${{ github.head_ref }} =~ '^v[0-9]+\.[0-9]+\.[0-9]+(\-.*)?$'  ]]; then
            echo ::set-output name=enable::true
          else
            echo ::set-output name=enable::false
          fi

  echo:
    runs-on: ubuntu-latest
    needs: spec
    if: ${{ needs:spec.outputs.release }}
    steps:
      - name: echo
        run: echo ${{ needs.spec.outputs.release }}
  echo1:
    runs-on: ubuntu-latest
    needs: echo
    steps:
      - name: echo
        run: echo "echo1"
  # git_tag:
  #   runs-on: ubuntu-latest
  #   needs: spec
  #   steps:
  #     - name: Git Tag
  #       id: git_tag
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         git tag ${{ github.head_ref }}
  #         git push origin ${{ github.head_ref }}

  # release:
  #   name: Publishing for ${{ matrix.os }}
  #   needs: spec
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-latest, ubuntu-latest]
  #       rust: [stable]
  #       include:
  #         - os: macos-latest
  #           artifact_prefix: macos
  #           target: x86_64-apple-darwin
  #           binary_postfix: ""
  #         - os: ubuntu-latest
  #           artifact_prefix: linux
  #           target: x86_64-unknown-linux-gnu
  #           binary_postfix: ""

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Installing Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         override: true
  #     - name: Installing needed macOS dependencies
  #       if: matrix.os == 'macos-latest'
  #       run: brew install openssl@1.1
  #     - name: Installing needed Ubuntu dependencies
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           target
  #         key: ${{ runner.os }}-cargo-publish-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
  #     - name: Running cargo build
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         toolchain: ${{ matrix.rust }}
  #         args: --release --target ${{ matrix.target }}

  #     - name: Packaging final binary
  #       shell: bash
  #       run: |
  #         cd target/${{ matrix.target }}/release
  #         strip rslack${{ matrix.binary_postfix }}
  #         tar czvf rslack-${{ matrix.artifact_prefix }}.tar.gz rslack${{ matrix.binary_postfix }}
  #         shasum -a 256 rslack-${{ matrix.artifact_prefix }}.tar.gz > rslack-${{ matrix.artifact_prefix }}.sha256
  #     - name: Releasing assets
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: |
  #           target/${{ matrix.target }}/release/rslack-${{ matrix.artifact_prefix }}.tar.gz
  #           target/${{ matrix.target }}/release/rslack-${{ matrix.artifact_prefix }}.sha256
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # publish-cargo:
  #   name: Publishing to Cargo
  #   needs: release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true
  #     - run: |
  #         sudo apt-get update
  #         sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: publish
  #         args: --token ${{ secrets.CARGO_API_KEY }} --allow-dirty
